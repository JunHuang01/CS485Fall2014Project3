System Call
	The system call is implemented by allocating global static 2d array of 20 elements with each one being a 1000 character array to represent a string.  Then in save variable we copy the user space string to kernel and then save it into the array.  The way we find the right spot is to iterate through the array and find either existing string or empty slot.  It can not save more than 20 system variable.  The implementation for get var operate in same fashion, basically iterate through the array and try to find matching variable name, and return the defition.  Once it finds a match, copy the variable defintion to user space and return to caller. The get next var does the samething as get var except upon matching the variable, it return the variable comes right after it in the array.
 
Lexer
	Our scanner is implemented in the lex language, and generated using flex. It simply defines the tokens declared in the spec, and passes them as a stream to the parser. The tokens are more specific than the ones in the assignment, in order to make parsing more straightforward, and to help find errors.

Parser
	Our parser is implemented in the yacc language, and generated by bison. It simply defines a grammar for our commands, and runs actions when it parses a rule.
	The flex file also serves as our entry point and the main loop of the shell. The grammar has a rule that acts as an infinite loop, repeatedly trying to match a rule that matches any valid command. In addition, if there is an error in a line, it will simply ignore everything until the next newline character, meaning that a syntax error will not cause the shell to crash.
	Each rule will construct a token or list of tokens and pass it to the shell command module, which handles the meat of the shell. All tokens must be seperated by whitespace.

Run
	Run is the most commonly used functionality of the shell. It will first fork the process, and do different things based on whether it is the child or the parent running. The parent is going to either wait for the child to finish, or add the child's pid to a linked list of pids that it is keeping track of.
	The child will first convert the linked list of tokens into an array with the appropriate structure. Then it simply passes the command, arg list, and path into execvp. The path is simply hardcoded initially, based on the default path for bash. The user can change it via environment variables later. Run will not track the pids of processes that run in the foreground - we assumed that you should not be able to see the processes spawned by another copy of the shell, and fg processes on your shell will block until they are done, thus never being visible via listjobs.

Listjobs
	Listjobs is the other half of the process management method. When you attempt to print the running jobs, it will iterate over all the process ids stored in the global linked list. It will display information about ones that it detects are still running, and remove ones that aren't. To determine if a process is still running, it calls waitpid with the WNOHANG option. This will return 0 if the child is still running, otherwise it will return nonzero. We also store the command for each process, to make the listjobs output more readable.

Defprompt
	Defprompt is a simple command. We have a character buffer as a global value that is replaced by the value of the token that is an argument to defprompt. This buffer is displayed as soon as a command has successfully finished executing, mimicing a command prompt.


Assignto
	This command will spawn a new process, just like run. However, it will then open a temporary file called ".TEMP.txt" and redirect stdout to that file. The child will exec a command, just like run, while the parent will wait for the child to finish. The parent will then redirect stdout to its old value, read the file into a buffer, and store that as an environment variable.
	If the output of the command has more than 1000 characters, the variable will not be changed. This is because the environment variables cannot contain more than 1000 characters.

Bye
	This just exits the shell by using the stdlib call exit(1).

Assign
	This takes the form of $VARNAME = "value". The righthand value cannot be longer than 1000 characters, and neither can the variable name. The values will be stored in a data structure in the kernel, and can be accessed by any other instance of svsh running on the machine. In theory, programs oculd be written that could modify them as well, though we don't have any, other than testing code.

Comments
	Comments begin with '#', and extend to the end of the line. Currently, a comment must contain only valid tokens, though they are never parsed and are thrown away in the parser step. Considering how relaxed the definition of a WORD is, it is unlikely to have a line that has an invalid token - a dollar sign by itself is the only thing I can think of.

Variable Interpolation
	Any variable that appears alone as an agument to a command, or the name of a command to run, will be replaced by the value stored as the environment variables. Because there is no way to escape a variable name, you cannot store a variable name inside a variable.
